// This file is auto-generated by scripts/generate-client-routes.js
// Do not edit manually - run 'pnpm run generate:routes' to update

import type { Express } from 'express'
import path from 'node:path'

// Static routes (exact matches)
export const STATIC_ROUTES = [
  '/',
  '/404',
  '/demo',
  '/lab',
  '/trpc-test',
] as const

// Dynamic routes (with parameters)
export const DYNAMIC_ROUTES = [
  { tanstack: '/n/$title', express: '/n/:title' },
] as const

/**
 * Register all client routes with Express
 * This ensures the server can serve the React SPA for valid routes only
 */
export function registerClientRoutes(app: Express, distPath: string) {
  // Register static routes
  STATIC_ROUTES.forEach(route => {
    app.get(route, (_req, res) => {
      res.sendFile(path.join(distPath, 'index.html'))
    })
  })

  // Register dynamic routes
  DYNAMIC_ROUTES.forEach(({ express: expressPath }) => {
    app.get(expressPath, (_req, res) => {
      res.sendFile(path.join(distPath, 'index.html'))
    })
  })
}

/**
 * Check if a path matches any valid route pattern
 */
export function isValidClientRoute(pathname: string): boolean {
  // Check static routes
  if (STATIC_ROUTES.includes(pathname as any)) {
    return true
  }
  
  // Check dynamic routes by pattern matching
  for (const { tanstack } of DYNAMIC_ROUTES) {
    if (matchesDynamicRoute(pathname, tanstack)) {
      return true
    }
  }
  
  return false
}

/**
 * Check if a pathname matches a dynamic route pattern
 */
function matchesDynamicRoute(pathname: string, pattern: string): boolean {
  // Convert TanStack pattern to regex
  // /n/$title -> /n/([^/]+)
  const regexPattern = pattern
    .replace(/$\w+/g, '([^/]+)')
    .replace(/\//g, '\/')
  
  const regex = new RegExp('^' + regexPattern + '$')
  return regex.test(pathname)
}

// Export route information for debugging
export const ROUTE_INFO = {
  static: STATIC_ROUTES,
  dynamic: DYNAMIC_ROUTES,
  total: STATIC_ROUTES.length + DYNAMIC_ROUTES.length
}
